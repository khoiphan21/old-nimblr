type User @model {
  id: ID!
  username: String!
  email: String!
  firstName: String
  lastName: String
  documentIds: [String]
}

type Document @model {
  id: ID!
  version: String
  type: DocumentType
  ownerId: String
  lastUpdatedBy: String
  sharingStatus: SharingStatus
  title: String
  editorIds: [String]
  viewerIds: [String]
  blockIds: [String]
  createdAt: String
  updatedAt: String
  # Properties for TEMPLATE type
  submissionDocIds: [String]
  # Properties for the Submission Details section
  recipientEmail: String
  submittedAt: String
  submissionStatus: SubmissionStatus
}

enum DocumentType {
  GENERIC
  TEMPLATE
  SUBMISSION
}

enum SharingStatus {
  PRIVATE
  PUBLIC
}

enum SubmissionStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
}

type Block @model {
  # Note: this type should contain ALL possible attributes from each block type
  id: ID!
  version: String
  type: BlockType
  documentId: String
  lastUpdatedBy: String
  createdAt: String
  updatedAt: String
  # Attributes from TextBlock
  value: String
  question: String
  answers: [String]
  questionType: QuestionType
  options: [String]
  textblocktype: TextBlockType
}

enum BlockType {
  TEXT
  QUESTION
}

enum QuestionType {
  PARAGRAPH
  SHORT_ANSWER
  MULTIPLE_CHOICE
  CHECKBOX
}

enum TextBlockType{
  TEXT
  HEADER
}

type Mutation {
  createTextBlock(input: CreateTextBlockInput!): Block
  updateTextBlock(input: UpdateTextBlockInput!): Block
  createQuestionBlock(input: CreateQuestionBlockInput!): Block
  updateQuestionBlock(input: UpdateQuestionBlockInput!): Block

}

type Subscription {
  onUpdateBlockInDocument(documentId: ID!): Block
    @aws_subscribe(
      mutations: [
        "updateBlock"
        "createTextBlock"
        "updateTextBlock"
        "deleteBlock"
        "createQuestionBlock"
        "updateQuestionBlock"
      ]
    )
  onSpecificDocumentUpdate(id: ID!): Document
    @aws_subscribe(mutations: ["updateDocument"])
}

input CreateTextBlockInput {
  id: ID
  version: String!
  type: BlockType!
  documentId: String!
  lastUpdatedBy: String!
  value: String
  textblocktype: TextBlockType!
}

input UpdateTextBlockInput {
  id: ID!
  version: String!
  type: BlockType
  documentId: String
  lastUpdatedBy: String!
  updatedAt: String!
  value: String
  textblocktype: TextBlockType!
}

input CreateQuestionBlockInput {
  id: ID
  version: String!
  type: BlockType!
  documentId: String!
  lastUpdatedBy: String!
  question: String
  answers: [String]
  questionType: QuestionType
  options: [String]
}

input UpdateQuestionBlockInput {
  id: ID!
  version: String!
  type: BlockType
  documentId: String
  lastUpdatedBy: String!
  question: String
  updatedAt: String
  answers: [String]
  questionType: QuestionType
  options: [String]
}

input UpdateQuestionBlockAnswerInput {
  id: ID!
  version: String!
  type: BlockType
  documentId: String
  lastUpdatedBy: String!
  answers: [String]!
}
